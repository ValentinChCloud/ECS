--[[
	Blah.
]]
-- Preprocessor line.
!print("The beginning.")

local a = "a" -- Comment A.
print(a)

-- More preprocessor lines.
!local b = "b" -- Comment B.
!print(b)

a = a..!(b)..a -- Comment, string concat.

!-- We be countin'! Also, this comment is so meta it's unbelievable.
!for i = 1, 3 do
	print("Aaaaand...")
	print(!(i*2))
!end

!local bool = --[[ Just a multiline
comment here...]] true

!(
-- Preprocessor block.
local function sum(x, y)
	return x+y
end
)

local c   = !(100+sum(10, 5))
local str = !(run"testInclude.lua")

_G.!!("global"..math.random(5)) = 99

-- Extended preprocessor line. (Balanced brackets.)
!local arr = {
	10,
}; local z = (
	100+(3^3)
)+arr[
	1
]
local z = !(z)

!local justTheLetterD = "d"

-- Dual code. (Outputs both both preprocessor code and normal Lua. Can only be used for assignment statements.)
!!local alpha    = "[%a_]"
!!local alphanum = "[%a%d_]"
!!local num      = "%"..justTheLetterD -- The value expression is evaluated in the metaprogram before outputted to the final program.
!!local ident    = alpha..alphanum.."*"
local   funcCall = !(ident.."%(.-%)")

local s = [[:: 2 * hello5( foo ){ ... }]]
print(s:match(ident))    -- "hello5"
print(s:match(num))      -- "2"
print(s:match(funcCall)) -- "hello5( foo )"

print("The end.")

!(
--[==[ Test token stuff.
for i, token in ipairs(assert(tokenize(getFileContents"testInclude.lua"))) do
	print(i, token.type, "", (token.representation:gsub("\n", "<NEWLINE>")))
end

for _, token in ipairs{
	newToken("comment",     "foo"),
	newToken("comment",     "foo", true),
	newToken("comment",     "foo\nbar"),
	newToken("comment",     "foo\nbar", true),
	newToken("comment",     "foo\n12]]34"),
	newToken("comment",     "foo\n12]]=]34"),
	newToken("identifier",  "dog"),
	-- newToken("identifier",  "bad!"), -- Error!
	newToken("keyword",     "while"),
	-- newToken("keyword",     "continue"), -- Error! :'(
	newToken("number",      42),
	newToken("number",      42,   "integer"),
	newToken("number",      5.7,  "float"),
	newToken("number",      0,    "float"),
	newToken("number",      5.7,  "scientific"),
	newToken("number",      .031, "scientific"),
	newToken("number",      42,   "hexadecimal"),
	newToken("number",      5.7,  "auto"),
	newToken("number",      math.huge),
	newToken("number",      -math.huge),
	newToken("number",      0/0),
	newToken("punctuation", "=="),
	-- newToken("punctuation", "!="), -- Error!
	newToken("string",      "Hello"),
	newToken("string",      "Hello", true),
	newToken("string",      "Hello\nworld"),
	newToken("string",      "Hello\nworld", true),
	newToken("string",      "Hello\n12]]34", true),
	newToken("string",      "Hello\n12]]=]34", true),
	newToken("whitespace",  " \t\n"),
	-- newToken("whitespace",  "foo"), -- Error!
	newToken("pp_entry",    false),
	newToken("pp_entry",    true),
	-- newToken("nope",        nil), -- Error!
} do
	print("------------------------")
	print("type  ", token.type)
	print("value ", (tostring(token.value):gsub("\n", "<NEWLINE>")))
	print("repr  ", (token.representation :gsub("\n", "<NEWLINE>")))
	if token.long ~= nil then
	print("long  ", token.long)
	end
	if token.double ~= nil then
	print("double", token.double)
	end
end
--]==]
)
